import re
import os
import urllib.parse
from datetime import datetime, timedelta

import aiohttp
from aiogram import types, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from db import add_booking, get_all_bookings, delete_booking_by_id

# FSM States
class BookingForm(StatesGroup):
    name = State()
    service = State()
    date = State()
    time = State()
    phone = State()

# Services
services = [
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è",
]

# Utilities
def get_service_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=service, callback_data=f"svc_{idx}")]
            for idx, service in enumerate(services)
        ]
    )

def is_valid_phone(phone: str) -> bool:
    return bool(re.fullmatch(r"\+996\d{9}", phone))

async def send_to_whatsapp(name: str, date: str, time: str, service: str, phone: str) -> bool:
    api_phone = os.getenv("WHATSAPP_PHONE")
    api_key = os.getenv("WHATSAPP_API_KEY")
    if not api_phone or not api_key:
        print("–û—à–∏–±–∫–∞: WHATSAPP_PHONE –∏–ª–∏ WHATSAPP_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False

    message = (
        f"üïµÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n"
        f"–ò–º—è: {name}\n"
        f"–£—Å–ª—É–≥–∞: {service}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–í—Ä–µ–º—è: {time}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    encoded_message = urllib.parse.quote(message)
    url = f"https://api.callmebot.com/whatsapp.php?phone={api_phone}&text={encoded_message}&apikey={api_key}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                return resp.status == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ WhatsApp API: {e}")
        return False

# Handlers
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(BookingForm.name)
    await state.update_data(name=None, service=None, date=None, time=None)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=types.ReplyKeyboardRemove()
    )

async def ask_service(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) > 50 or not any(c.isalpha() for c in name):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    await state.update_data(name=name)
    await state.set_state(BookingForm.service)
    await message.answer("üíÖ –ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã–±—Ä–∞—Ç—å?", reply_markup=get_service_keyboard())

async def process_service(callback: types.CallbackQuery, state: FSMContext):
    try:
        idx = int(callback.data.replace("svc_", ""))
        if idx < 0 or idx >= len(services):
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —É—Å–ª—É–≥–∞.")
            return
        await state.update_data(service=services[idx])
        await state.set_state(BookingForm.date)
        await callback.message.answer("üóì –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-10)")
    finally:
        await callback.answer()

async def ask_time(message: types.Message, state: FSMContext):
    date = message.text.strip()
    try:
        parsed_date = datetime.strptime(date, "%Y-%m-%d")
        if parsed_date.date() < datetime.now().date():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return

    await state.update_data(date=date)
    await state.set_state(BookingForm.time)
    await message.answer("üïí –í–æ —Å–∫–æ–ª—å–∫–æ? (–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")

async def ask_phone(message: types.Message, state: FSMContext):
    time_str = message.text.strip()
    try:
        parsed_time = datetime.strptime(time_str, "%H:%M").time()
        if not (8 <= parsed_time.hour <= 21):
            await message.answer("‚ùå –ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ —Å 08:00 –¥–æ 21:00.")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.")
        return

    data = await state.get_data()
    date = data.get("date")
    if not date:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start")
        return

    try:
        new_start = datetime.strptime(f"{date} {time_str}", "%Y-%m-%d %H:%M")
        new_end = new_start + timedelta(hours=2)

        bookings = await get_all_bookings()

        for b in bookings:
            booking_id, name, b_date, b_time, service, phone = b

            if b_date != date:
                continue

            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º b_time
            if hasattr(b_time, 'strftime'):
                b_time_str = b_time.strftime("%H:%M")
            else:
                b_time_str = str(b_time)[:5]

            exist_start = datetime.strptime(f"{b_date} {b_time_str}", "%Y-%m-%d %H:%M")
            exist_end = exist_start + timedelta(hours=2)

            if new_start < exist_end and exist_start < new_end:
                await message.answer(f"‚ùå –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –¥—Ä—É–≥–æ–π –∑–∞–ø–∏—Å—å—é –≤ {b_time_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
                return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await state.update_data(time=time_str)
    await state.set_state(BookingForm.phone)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–§–æ—Ä–º–∞—Ç: +996123456789):")

async def validate_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +996 –∏ 9 —Ü–∏—Ñ—Ä.")
        return

    data = await state.get_data()
    missing = [f for f in ["name", "service", "date", "time"] if not data.get(f)]
    if missing:
        await state.clear()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ ({', '.join(missing)}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    if not await add_booking(data["name"], data["service"], data["date"], data["time"], phone):
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await send_to_whatsapp(data["name"], data["date"], data["time"], data["service"], phone)

    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–ò–º—è: {data['name']}\n"
        f"–£—Å–ª—É–≥–∞: {data['service']}\n"
        f"–î–∞—Ç–∞: {data['date']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    await state.clear()

async def view_bookings(message: types.Message):
    admin_id = os.getenv("ADMIN_USER_ID", "0")
    if str(message.from_user.id) != admin_id:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏.")
        return

    bookings = await get_all_bookings()
    if not bookings:
        await message.answer("üìì –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    text = "\n\n".join(
        f"ID: {b[0]}\n–ò–º—è: {b[1]}\n–£—Å–ª—É–≥–∞: {b[4]}\n–î–∞—Ç–∞: {b[2]}\n–í—Ä–µ–º—è: {b[3]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {b[5]}"
        for b in bookings
    )
    await message.answer(f"üìì –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n{text}")

async def delete_by_id(message: types.Message):
    admin_id = os.getenv("ADMIN_USER_ID", "0")
    if str(message.from_user.id) != admin_id:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏.")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ö† –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /delete <ID>")
        return

    booking_id = int(parts[1])
    if await delete_booking_by_id(booking_id):
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å —Å ID {booking_id} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# Register Handlers
def register_handlers(dp: Dispatcher):
    dp.message.register(start, CommandStart())
    dp.message.register(ask_service, BookingForm.name)
    dp.callback_query.register(process_service, lambda c: c.data.startswith("svc_"))
    dp.message.register(ask_time, BookingForm.date)
    dp.message.register(ask_phone, BookingForm.time)
    dp.message.register(validate_phone, BookingForm.phone)
    dp.message.register(view_bookings, Command("viewbookings"))
    dp.message.register(delete_by_id, Command("delete"))