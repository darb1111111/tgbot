# handlers.py
import re
import os
import urllib.parse
from datetime import datetime

import aiohttp
from aiogram import types, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from db import add_booking, get_all_bookings, delete_booking_by_id, save_draft, get_draft, clear_draft

class BookingForm(StatesGroup):
    name = State()
    service = State()
    date = State()
    time = State()
    phone = State()

services = [
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è",
]

def get_service_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=s, callback_data=f"svc_{i}")] for i, s in enumerate(services)]
    )

def is_valid_phone(phone):
    return bool(re.fullmatch(r"\+996\d{9}", phone))

async def send_to_whatsapp(name, date, time, service, phone):
    api_phone = os.getenv("WHATSAPP_PHONE")
    api_key = os.getenv("WHATSAPP_API_KEY")
    if not api_phone or not api_key:
        return False

    msg = f"üïµ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    url = f"https://api.callmebot.com/whatsapp.php?phone={api_phone}&text={urllib.parse.quote(msg)}&apikey={api_key}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                return resp.status == 200
    except:
        return False

async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await clear_draft(message.from_user.id)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(BookingForm.name)

async def ask_service(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) > 50 or not any(c.isalpha() for c in name):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return
    await save_draft(message.from_user.id, "name", name)
    await message.answer("üíÖ –ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã–±—Ä–∞—Ç—å?", reply_markup=get_service_keyboard())
    await state.set_state(BookingForm.service)

async def process_service(callback: types.CallbackQuery, state: FSMContext):
    idx = int(callback.data.replace("svc_", ""))
    if 0 <= idx < len(services):
        await save_draft(callback.from_user.id, "service", services[idx])
        await callback.message.answer("üóì –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–ì–ì–ì–ì-–ú–ú-–î–î)")
        await state.set_state(BookingForm.date)
    await callback.answer()

async def ask_time(message: types.Message, state: FSMContext):
    date = message.text.strip()
    try:
        parsed = datetime.strptime(date, "%Y-%m-%d").date()
        if parsed < datetime.now().date():
            raise ValueError
    except:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 2025-07-10")
        return
    await save_draft(message.from_user.id, "date", date)
    await message.answer("üïí –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
    await state.set_state(BookingForm.time)

async def ask_phone(message: types.Message, state: FSMContext):
    time = message.text.strip()
    try:
        parsed = datetime.strptime(time, "%H:%M").time()
        if parsed.hour < 8 or parsed.hour > 21:
            raise ValueError
    except:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: 14:30")
        return

    draft = await get_draft(message.from_user.id)
    bookings = await get_all_bookings()
    if any(b[2] == draft.get("date") and b[3] == time for b in bookings):
        await message.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!")
        return

    await save_draft(message.from_user.id, "time", time)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +996123456789):")
    await state.set_state(BookingForm.phone)

async def validate_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: +996123456789")
        return

    await save_draft(message.from_user.id, "phone", phone)
    data = await get_draft(message.from_user.id)
    required = ["name", "service", "date", "time", "phone"]
    if not all(k in data and data[k] for k in required):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        await state.clear()
        return

    if not await add_booking(data["name"], data["date"], data["time"], data["service"], data["phone"]):
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await send_to_whatsapp(data["name"], data["date"], data["time"], data["service"], data["phone"])

    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n–ò–º—è: {data['name']}\n–£—Å–ª—É–≥–∞: {data['service']}\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
    )
    await state.clear()
    await clear_draft(message.from_user.id)

async def view_bookings(message: types.Message):
    admin = os.getenv("ADMIN_USER_ID", "0")
    if str(message.from_user.id) != admin:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    bookings = await get_all_bookings()
    if not bookings:
        await message.answer("üìì –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    text = "\n\n".join(
        f"ID: {b[0]}\n–ò–º—è: {b[1]}\n–£—Å–ª—É–≥–∞: {b[4]}\n–î–∞—Ç–∞: {b[2]}\n–í—Ä–µ–º—è: {b[3]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {b[5]}" for b in bookings
    )
    await message.answer(f"üìì –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n{text}")

async def delete_by_id(message: types.Message):
    admin = os.getenv("ADMIN_USER_ID", "0")
    if str(message.from_user.id) != admin:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /delete <ID>")
        return

    bid = int(parts[1])
    if await delete_booking_by_id(bid):
        await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {bid}")
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def register_handlers(dp: Dispatcher):
    dp.message.register(start, CommandStart())
    dp.message.register(ask_service, BookingForm.name)
    dp.callback_query.register(process_service, lambda c: c.data.startswith("svc_"))
    dp.message.register(ask_time, BookingForm.date)
    dp.message.register(ask_phone, BookingForm.time)
    dp.message.register(validate_phone, BookingForm.phone)
    dp.message.register(view_bookings, Command("viewbookings"))
    dp.message.register(delete_by_id, Command("delete"))