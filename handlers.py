# handlers.py
import re
import os
import urllib.parse
from datetime import datetime

import aiohttp
from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command

from db import add_booking, get_all_bookings, delete_booking_by_id

# --- FSM States ---
class BookingForm(StatesGroup):
    name = State()
    service = State()
    date = State()
    time = State()
    phone = State()

# --- Services ---
services = [
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è",
]

# --- Utilities ---
def get_service_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=s, callback_data=f"svc_{i}")] for i, s in enumerate(services)]
    )

def is_valid_phone(phone: str) -> bool:
    return re.fullmatch(r"\+996\\d{9}", phone) is not None

async def send_to_whatsapp(name, date, time, service, phone):
    api_phone = os.getenv("WHATSAPP_PHONE")
    apikey = os.getenv("API_KEY")
    if not api_phone or not apikey:
        return
    message = f"üïµ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    url = f"https://api.callmebot.com/whatsapp.php?phone={api_phone}&text={urllib.parse.quote(message)}&apikey={apikey}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                if resp.status != 200:
                    print(f"–û—à–∏–±–∫–∞ WhatsApp API {resp.status}: {await resp.text()}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ WhatsApp API: {e}")

# --- Handlers ---
async def start(message: types.Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(BookingForm.name)

async def ask_service(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) > 50 or not any(c.isalpha() for c in name):
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
    await state.update_data(name=name)
    await message.answer("üíÖ –ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã–±—Ä–∞—Ç—å?", reply_markup=get_service_keyboard())
    await state.set_state(BookingForm.service)

async def process_service(callback: types.CallbackQuery, state: FSMContext):
    idx = int(callback.data.replace("svc_", ""))
    await state.update_data(service=services[idx])
    await callback.message.answer("üóì –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–ì–ì–ì–ì-–ú–ú-–î–î)")
    await state.set_state(BookingForm.date)
    await callback.answer()

async def ask_time(message: types.Message, state: FSMContext):
    date = message.text.strip()
    try:
        parsed_date = datetime.strptime(date, "%Y-%m-%d")
        if parsed_date.date() < datetime.now().date():
            return await message.answer("‚ùå –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º.")
    except ValueError:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: 2025-07-10")
    await state.update_data(date=date)
    await message.answer("üïí –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
    await state.set_state(BookingForm.time)

async def ask_phone(message: types.Message, state: FSMContext):
    time = message.text.strip()
    try:
        parsed_time = datetime.strptime(time, "%H:%M").time()
        if parsed_time.hour < 8 or parsed_time.hour > 21:
            return await message.answer("‚ùå –ó–∞–ø–∏—Å—å —Å 08:00 –¥–æ 21:00.")
    except ValueError:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: 14:30")
    data = await state.get_data()
    bookings = await get_all_bookings()
    if any(b[2] == data["date"] and b[3] == time for b in bookings):
        return await message.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ!")
    await state.update_data(time=time)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +996123456789):")
    await state.set_state(BookingForm.phone)

async def validate_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: +996123456789")
    data = await state.update_data(phone=phone)
    data = await state.get_data()
    saved = await add_booking(data["name"], data["date"], data["time"], data["service"], phone)
    if not saved:
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    await send_to_whatsapp(data["name"], data["date"], data["time"], data["service"], phone)
    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ò–º—è: {data['name']}\n–£—Å–ª—É–≥–∞: {data['service']}\n–î–∞—Ç–∞: {data['date']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    await state.clear()

async def view_bookings(message: types.Message):
    if message.from_user.id != int(os.getenv("ADMIN_USER_ID", "0")):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    bookings = await get_all_bookings()
    if not bookings:
        return await message.answer("üìì –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    text = "\n\n".join(
        f"ID: {b[0]}\n–ò–º—è: {b[1]}\n–£—Å–ª—É–≥–∞: {b[4]}\n–î–∞—Ç–∞: {b[2]}\n–í—Ä–µ–º—è: {b[3]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {b[5]}"
        for b in bookings
    )
    await message.answer(f"üìì –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n{text}")

async def delete_by_id(message: types.Message):
    if message.from_user.id != int(os.getenv("ADMIN_USER_ID", "0")):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("‚ö† /delete <ID>")
    booking_id = int(parts[1])
    if await delete_booking_by_id(booking_id):
        await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {booking_id}")
    else:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
def register_handlers(dp: Dispatcher):
    dp.message.register(start, CommandStart())
    dp.message.register(ask_service, BookingForm.name)
    dp.callback_query.register(process_service, lambda c: c.data.startswith("svc_"))
    dp.message.register(ask_time, BookingForm.date)
    dp.message.register(ask_phone, BookingForm.time)
    dp.message.register(validate_phone, BookingForm.phone)
    dp.message.register(view_bookings, Command("viewbookings"))
    dp.message.register(delete_by_id, Command("delete"))