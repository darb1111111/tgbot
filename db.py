import aiomysql
import os
from dotenv import load_dotenv

load_dotenv()

def str_strip(value):
    return value.strip() if isinstance(value, str) else value

DB_CONFIG = {
    "host": str_strip(os.getenv("DB_HOST")),
    "port": int(str_strip(os.getenv("DB_PORT", "3306"))),
    "user": str_strip(os.getenv("DB_USER")),
    "password": str_strip(os.getenv("DB_PASSWORD")),
    "db": str_strip(os.getenv("DB_NAME")),
    "minsize": 1,
    "maxsize": 3,
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
for key, value in DB_CONFIG.items():
    if value in (None, ""):
        raise ValueError(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{key}' –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞!")

pool = None

async def init_db():
    global pool
    if pool is not None:
        pool.close()
        await pool.wait_closed()
        print("üîÅ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø—É–ª –∑–∞–∫—Ä—ã—Ç.")
    pool = await aiomysql.create_pool(**DB_CONFIG)
    print("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω.")

async def get_db_connection():
    global pool
    if pool is None:
        raise Exception("‚ùå –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ init_db()")
    return await pool.acquire()

async def add_booking(name, date, time, service, phone):
    global pool
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            try:
                await cur.execute(
                    "INSERT INTO appointments (name, date, time, service, phone) VALUES (%s, %s, %s, %s, %s)",
                    (name, date, time, service, phone)
                )
                await conn.commit()
                return True
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", e)
                return False

async def get_all_bookings():
    global pool
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT * FROM appointments")
            return await cur.fetchall()

async def delete_booking_by_id(booking_id: int):
    global pool
    async with pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute("DELETE FROM appointments WHERE id = %s", (booking_id,))
            await conn.commit()
            return cursor.rowcount > 0  # True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞

async def close_db():
    global pool
    if pool:
        pool.close()
        await pool.wait_closed()
        pool = None
        print("üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
    else:
        print("‚Ñπ –ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
