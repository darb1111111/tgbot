import asyncio
import aiohttp
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import config
import urllib.parse
from keep_alive import app  # aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
from db import init_db, add_booking, get_all_bookings  # üëà –∏—Å–ø–æ–ª—å–∑—É–µ–º db.py

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –£—Å–ª—É–≥–∏
services = [
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
]

def get_service_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=s, callback_data=f"svc_{i}")] for i, s in enumerate(services)
    ])

class BookingForm(StatesGroup):
    name = State()
    service = State()
    date = State()
    time = State()
    phone = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def send_to_whatsapp(name, date, time, service, phone):
    user_phone = "996709111301"
    apikey = config.apikey
    message = (
        f"üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n"
        f"–ò–º—è: {name}\n"
        f"–£—Å–ª—É–≥–∞: {service}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–í—Ä–µ–º—è: {time}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    encoded_message = urllib.parse.quote(message)
    url = f"https://api.callmebot.com/whatsapp.php?phone={user_phone}&text={encoded_message}&apikey={apikey}"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                response_text = await resp.text()
                if resp.status == 200:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp:\n{message}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {resp.status}\n{response_text}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ WhatsApp: {e}")

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(BookingForm.name)

@dp.message(Command("viewbookings"))
async def view_bookings(message: types.Message):
    allowed_user_id = 7046147843
    if message.from_user.id != allowed_user_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return
    bookings = get_all_bookings()
    if not bookings:
        await message.answer("üìÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    text = "üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for b in bookings:
        text += (
            f"ID: {b[0]}\n"
            f"–ò–º—è: {b[1]}\n"
            f"–£—Å–ª—É–≥–∞: {b[4]}\n"
            f"–î–∞—Ç–∞: {b[2]}\n"
            f"–í—Ä–µ–º—è: {b[3]}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {b[5]}\n\n"
        )
    await message.answer(text)

@dp.message(BookingForm.name)
async def ask_service(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üíÖ –ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã–±—Ä–∞—Ç—å?", reply_markup=get_service_keyboard())
    await state.set_state(BookingForm.service)

@dp.callback_query(lambda c: c.data.startswith("svc_"))
async def process_service(callback: types.CallbackQuery, state: FSMContext):
    idx = int(callback.data.replace("svc_", ""))
    await state.update_data(service=services[idx])
    await callback.message.answer("üìÜ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-01)")
    await state.set_state(BookingForm.date)
    await callback.answer()

@dp.message(BookingForm.date)
async def ask_time(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("üïì –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
    await state.set_state(BookingForm.time)

@dp.message(BookingForm.time)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(BookingForm.phone)

@dp.message(BookingForm.phone)
async def confirm(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    add_booking(data["name"], data["date"], data["time"], data["service"], data["phone"])
    await send_to_whatsapp(data["name"], data["date"], data["time"], data["service"], data["phone"])
    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–ò–º—è: {data['name']}\n"
        f"–£—Å–ª—É–≥–∞: {data['service']}\n"
        f"–î–∞—Ç–∞: {data['date']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π üí¨"
    )
    await state.clear()

# üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä
async def run_web():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    print("üåç –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://0.0.0.0:8080")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    init_db()
    print("‚úÖ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    await asyncio.gather(run_web(), dp.start_polling(bot))

if __name__ == "__main__":
    asyncio.run(main())

