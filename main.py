import asyncio
import aiohttp
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import config
import urllib.parse
from datetime import datetime
import pytz
import logging
from keep_alive import app  # –¢–≤–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å)
from db import init_db, add_booking, get_all_bookings  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ db.py

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

services = [
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
]

def get_service_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=s, callback_data=f"svc_{i}")] for i, s in enumerate(services)
    ])

class BookingForm(StatesGroup):
    name = State()
    service = State()
    date = State()
    time = State()
    phone = State()

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(BookingForm.name)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏")

@dp.message(Command("viewbookings"))
async def view_bookings(message: types.Message):
    allowed_user_id = config.ADMIN_USER_ID
    if message.from_user.id != allowed_user_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å—è–º")
        return
    bookings = get_all_bookings()
    if not bookings:
        await message.answer("üìÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        logging.info("–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∑–∞–ø–∏—Å–∏, –±–∞–∑–∞ –ø—É—Å—Ç–∞")
        return
    text = "üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for b in bookings:
        text += f"ID: {b[0]}\n–ò–º—è: {b[1]}\n–£—Å–ª—É–≥–∞: {b[4]}\n–î–∞—Ç–∞: {b[2]}\n–í—Ä–µ–º—è: {b[3]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {b[5]}\n\n"
    await message.answer(text)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∑–∞–ø–∏—Å–∏")

@dp.message(BookingForm.name)
async def ask_service(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) > 50:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–Ω–µ –ø—É—Å—Ç–æ–µ, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: {message.text}")
        return
    await state.update_data(name=name)
    await message.answer("üíÖ –ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã–±—Ä–∞—Ç—å?", reply_markup=get_service_keyboard())
    await state.set_state(BookingForm.service)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è: {name}")

@dp.callback_query(lambda c: c.data.startswith("svc_"))
async def process_service(callback: types.CallbackQuery, state: FSMContext):
    idx = int(callback.data.replace("svc_", ""))
    await state.update_data(service=services[idx])
    await callback.message.answer("üìÜ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-01)")
    await state.set_state(BookingForm.date)
    await callback.answer()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: {services[idx]}")

@dp.message(BookingForm.date)
async def ask_time(message: types.Message, state: FSMContext):
    date = message.text.strip()
    timezone = pytz.timezone(config.TIMEZONE)
    try:
        parsed_date = datetime.strptime(date, "%Y-%m-%d")
        local_date = timezone.localize(parsed_date)
        if local_date.date() < datetime.now(timezone).date():
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-01.")
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É: {date}")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-01.")
        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {message.text}")
        return
    await state.update_data(date=date)
    await message.answer("üïì –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
    await state.set_state(BookingForm.time)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {date}")

# **–í–ê–ñ–ù–û**: —Ñ—É–Ω–∫—Ü–∏—è check_time_availability –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ,
# –Ω—É–∂–Ω–æ –µ—ë –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤ ask_time

def check_time_availability(date: str, time: str) -> bool:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–Ω—è—Ç–æ –ª–∏ –≤—Ä–µ–º—è
    bookings = get_all_bookings()
    for b in bookings:
        if b[2] == date and b[3] == time:
            return False
    return True

@dp.message(BookingForm.time)
async def ask_phone(message: types.Message, state: FSMContext):
    time = message.text.strip()
    try:
        datetime.strptime(time, "%H:%M")
        data = await state.get_data()
        if not check_time_availability(data.get("date"), time):
            await message.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30.")
            logging.warning(f"–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ: {data.get('date')} {time}")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30.")
        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {message.text}")
        return
    await state.update_data(time=time)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +996123456789):")
    await state.set_state(BookingForm.phone)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è: {time}")

@dp.message(BookingForm.phone)
async def confirm(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not phone.startswith('+') or len(phone) < 10 or not phone[1:].isdigit():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, +996123456789.")
        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}")
        return
    await state.update_data(phone=phone)
    data = await state.get_data()
    success = add_booking(data["name"], data["date"], data["time"], data["service"], data["phone"])
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WhatsApp –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    whatsapp_success = await send_to_whatsapp(data["name"], data["date"], data["time"], data["service"], data["phone"])
    if not whatsapp_success:
        await send_to_telegram_fallback(data["name"], data["date"], data["time"], data["service"], data["phone"])
    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–ò–º—è: {data['name']}\n"
        f"–£—Å–ª—É–≥–∞: {data['service']}\n"
        f"–î–∞—Ç–∞: {data['date']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. üí¨"
    )
    logging.info(f"–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è {message.from_user.id}: {data}")
    await state.clear()

async def send_to_whatsapp(name, date, time, service, phone):
    phone_number = config.ADMIN_PHONE
    apikey = config.apikey
    message = f"üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    encoded_message = urllib.parse.quote(message)
    url = f"https://api.callmebot.com/whatsapp.php?phone={phone_number}&text={encoded_message}&apikey={apikey}"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                response_text = await resp.text()
                if resp.status == 200:
                    logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp: {message}")
                    return True
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp, –∫–æ–¥ {resp.status}: {response_text}")
                    return False
        except Exception as e:
            logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ WhatsApp: {e}")
            return False

async def send_to_telegram_fallback(name, date, time, service, phone):
    try:
        message = f"üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å (—Ä–µ–∑–µ—Ä–≤):\n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        await bot.send_message(chat_id=config.ADMIN_USER_ID, text=message)
        logging.info(f"–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message}")
    except Exception as e:
        logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

async def run_web():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

async def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await run_web()
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
