
import asyncio
import aiohttp
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import config
import urllib.parse

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –£—Å–ª—É–≥–∏
services = [
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—Ä–æ–≤–µ–π",
    "–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
]

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—Å–ª—É–≥
def get_service_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=s, callback_data=f"svc_{i}")] for i, s in enumerate(services)
    ])
    return keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class BookingForm(StatesGroup):
    name = State()
    service = State()
    date = State()
    time = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        date TEXT,
        time TEXT,
        service TEXT
    )''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
def add_booking(name, date, time, service):
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("INSERT INTO bookings (name, date, time, service) VALUES (?, ?, ?, ?)", (name, date, time, service))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î
def get_all_bookings():
    conn = sqlite3.connect('appointments.db')
    c = conn.cursor()
    c.execute("SELECT id, name, date, time, service FROM bookings ORDER BY date, time")
    bookings = c.fetchall()
    conn.close()
    return bookings


async def send_to_whatsapp(name, date, time, service):
    phone = "996709111301"  
    apikey = config.apikey  # –í–∞—à API –∫–ª—é—á CallMeBot
    message = f"üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}"
    encoded_message = urllib.parse.quote(message)  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URL
    url = f"https://api.callmebot.com/whatsapp.php?phone={phone}&text={encoded_message}&apikey={apikey}"
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                response_text = await resp.text()
                if resp.status == 200:
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp: {message}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp: –°—Ç–∞—Ç—É—Å {resp.status}")
                    print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
                    print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {url}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ WhatsApp: {e}")
            print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {url}")


@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(BookingForm.name)


@dp.message(Command("viewbookings"))
async def view_bookings(message: types.Message):
    allowed_user_id = 7046147843  
    if message.from_user.id != allowed_user_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return
    bookings = get_all_bookings()
    if not bookings:
        await message.answer("üìÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    response = "üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for booking in bookings:
        id, name, date, time, service = booking
        response += f"ID: {id}\n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n\n"
    await message.answer(response)

# –ò–º—è -> –£—Å–ª—É–≥–∞
@dp.message(BookingForm.name)
async def ask_service(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üíÖ –ö–∞–∫—É—é —É—Å–ª—É–≥—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?", reply_markup=get_service_keyboard())
    await state.set_state(BookingForm.service)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
@dp.callback_query(lambda c: c.data.startswith("svc_"))
async def process_service(callback: types.CallbackQuery, state: FSMContext):
    service_index = int(callback.data.replace("svc_", ""))
    service = services[service_index]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    await state.update_data(service=service)
    await callback.message.answer("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-01)")
    await state.set_state(BookingForm.date)
    await callback.answer()

# –î–∞—Ç–∞ -> –í—Ä–µ–º—è
@dp.message(BookingForm.date)
async def ask_time(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
    await state.set_state(BookingForm.time)

# –í—Ä–µ–º—è -> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.message(BookingForm.time)
async def confirm(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    data = await state.get_data()
    name = data["name"]
    date = data["date"]
    time = data["time"]
    service = data["service"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    add_booking(name, date, time, service)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WhatsApp
    await send_to_whatsapp(name, date, time, service)

    await message.answer(
        f"–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å!"
    )
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    from keep_alive import keep_alive
    keep_alive()
    asyncio.run(main())